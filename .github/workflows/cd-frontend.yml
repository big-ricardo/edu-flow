name: "[CD] Frontend"
run-name: "[CD] Frontend by ${{ github.actor }}"

on:
  push:
    branches:
      - main

env:
  NODE_VERSION: 20
  PROJECT_PATH: ./Frontend
  ARTIFACT_NAME: build-${{ github.event.repository.name }}frontend-${{ github.run_id }}
  OUTPUT_PATH: /dist
  CI: false

jobs:
  install:
    runs-on: ubuntu-latest
    name: Install Dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Alter path of project
        run: |
          cd ${{ env.PROJECT_PATH }}

      - name: Cache Dependencies
        id: packages
        uses: actions/cache@v3
        with:
          path: |
            ${{env.PROJECT_PATH}}/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('${{env.PROJECT_PATH}}/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-frontend-

      - name: Install Dependencies
        if: steps.packages.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.PROJECT_PATH }}
          npm install --legacy-peer-deps

  build:
    runs-on: ubuntu-latest
    name: Build
    needs: [install]
    environment: 
        name: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Alter path of project
        run: |
          cd ${{ env.PROJECT_PATH }}

      - name: Cache dependencies
        id: packages
        uses: actions/cache@v3
        with:
          path: |
            ${{env.PROJECT_PATH}}/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('${{env.PROJECT_PATH}}/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-frontend-

      - name: Build
        env:
          VITE_BASE_URL: ${{ vars.VITE_BASE_URL }}
          VITE_SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          VITE_GA_TOKEN: ${{ secrets.GA_TOKEN }}
        run: |
              cd ${{ env.PROJECT_PATH }}
              npm run build
        
      - name: "Zip build artifact"
        shell: bash
        run: |
          pushd '${{env.PROJECT_PATH}}'/${{env.OUTPUT_PATH}}
          zip -r ${{env.ARTIFACT_NAME}}.zip * 

      - name: "Upload Artifact of Function App"
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.ARTIFACT_NAME}}
          path:  ${{env.PROJECT_PATH}}/${{env.OUTPUT_PATH}}/${{env.ARTIFACT_NAME}}.zip
          if-no-files-found: error

  # test:
  #   runs-on: ubuntu-latest
  #   name: Test
  #   needs: [install]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Use Node.js ${{ env.NODE_VERSION }}
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Alter path of project
  #       run: |
  #         cd ${{ env.PROJECT_PATH }}

  #     - name: Cache dependencies
  #       id: packages
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ${{env.PROJECT_PATH}}/node_modules
  #         key: ${{ runner.os }}-frontend-${{ hashFiles('${{env.PROJECT_PATH}}/pnpm-lock.yaml') }}
  #         restore-keys: ${{ runner.os }}-frontend-

  #     - name: Test
  #       run: |
  #         cd ${{ env.PROJECT_PATH }}
  #         npm run test

  deploy:
    name: "Azure Static Webapp Deploy"
    needs: build
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.builddeploy.outputs.static_web_app_url }}
    environment: 
        name: Production
    steps:
      - name: "Download Artifact"
        uses: actions/download-artifact@v3
        with:
            name: ${{ env.ARTIFACT_NAME }}

      - name: "Unzip Artifact"
        shell: bash
        run: |
          unzip ${{env.ARTIFACT_NAME}}.zip -d .
          rm ${{env.ARTIFACT_NAME}}.zip

      - name: Deploy to Azure Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          azure_static_web_apps_api_token: ${{ secrets.TOKEN }}
          action: "upload"
          app_location: "/"
          app_artifact_location: "/"
          skip_app_build: true